#include "frameosd.h"
#include "ui_frameosd.h"

#include <QMessageBox>
#include <QRegExpValidator>

#define NUMBER_RX "[0-9.]+$"


FrameOSD::FrameOSD(QWidget *parent) :
    QFrame(parent),
    ui(new Ui::FrameOSD)
{
    ui->setupUi(this);

    redisClient = HMI_redisInit("192.168.1.241");
    HMI_redisConnect(redisClient);

    QRegExp rxNumber(NUMBER_RX);
    QRegExpValidator *valiNumber = new QRegExpValidator(rxNumber, this);

    // ==== validator Gyro ==== //
    ui->osdGyroHeadingValue->setValidator(valiNumber);
    ui->osdGyroPitchValue->setValidator(valiNumber);
    ui->lineEditGyroRoll->setValidator(valiNumber);

    // ==== validator GPS ==== //
    ui->lineEditGpsLat->setValidator(valiNumber);
    ui->lineEditGpsLong->setValidator(valiNumber);

    // ==== validator Wind ==== //
    ui->lineEditWindDir->setValidator(valiNumber);
    ui->lineEditWindSpeed->setValidator(valiNumber);

    // ==== validator Weather ==== //
    ui->lineEditWeatherTemp->setValidator(valiNumber);
    ui->lineEditWeatherPress->setValidator(valiNumber);
    ui->lineEditWeatherHumidity->setValidator(valiNumber);

    // ==== validator Speed ==== //
    ui->lineEditSpeedSOG->setValidator(valiNumber);
    ui->lineEditSpeedCOG->setValidator(valiNumber);

    // ==== validator Water Speed ==== //
    ui->lineEditWaterSOG->setValidator(valiNumber);
    ui->lineEditWaterCOG->setValidator(valiNumber);

    if(HMI_isRedisValid(redisClient))
    {
        int status;
        // ==== init redis mode Gyro ==== //
        status = HMI_RedisExecute(redisClient,"SET inersia_mode auto");

        // ==== init redis mode GPS ==== //
        status = HMI_RedisExecute(redisClient,"SET position_mode auto");

        // ==== init redis mode Wind ==== //
        status = HMI_RedisExecute(redisClient,"SET wind_mode auto");

        // ==== init redis mode Weather ==== //
        status = HMI_RedisExecute(redisClient,"SET weather_mode auto");

        // ==== init redis mode Speed ==== //
        status = HMI_RedisExecute(redisClient,"SET speed_mode auto");

        // ==== init redis mode Water Speed ==== //
        status = HMI_RedisExecute(redisClient,"SET waterspeed_mode auto");
        qDebug()<<Q_FUNC_INFO<<"SET redis mode waterspeed_mode status: "<<status;

        setEnabled(true);
        redisEnableKeepAlive(redisClient->context);
    }
    else
        setEnabled(false);

    // ==== init value and mode Gyro ==== //
    GyroAutoModeUi();

    // ==== init value and mode GPS ==== //
    GpsAutoModeUi();

    // ==== init value and mode Wind ==== //
    WindAutoModeUi();

    // ==== init value and mode Weather ==== //
    WeatherAutoModeUi();

    // ==== init value and mode Speed ==== //
    SpeedAutoModeUi();

    // ==== init value and mode Water Speed ==== //
    WaterSpeedAutoModeUi();

}

FrameOSD::~FrameOSD()
{
    qDebug()<<Q_FUNC_INFO;
    if(HMI_isRedisValid(redisClient))
        HMI_redisDeInit(redisClient);

    delete ui;
}

void FrameOSD::on_osdTimerTimeOut()
{
    GyroTimerTimeOut();
    GpsTimerTimeOut();
    WindTimerTimeOut();
    WeatherTimerTimeOut();
    SpeedTimerTimeOut();
    WaterSpeedTimerTimeOut();

    if(!HMI_isRedisValid(redisClient))
    {
        HMI_redisConnect(redisClient);
        if(isEnabled())
            setEnabled(false);
    }
    else
    {
        if(!isEnabled())
            setEnabled(true);
    }

}

// ==== Gyro ==== //

void FrameOSD::GyroAutoModeUi()
{
    ui->pushButtonGyroApply->setEnabled(false);
    ui->pushButtonGyroApply->setStyleSheet("color: rgb(20, 20, 20);");

    ui->osdGyroHeadingValue->setEnabled(false);
    ui->osdGyroPitchValue->setEnabled(false);
    ui->lineEditGyroRoll->setEnabled(false);
}

void FrameOSD::GyroManualModeUi()
{
    ui->pushButtonGyroApply->setEnabled(true);
    ui->pushButtonGyroApply->setStyleSheet("");

    ui->osdGyroHeadingValue->setStyleSheet("color:white;");
    ui->lineEditGyroRoll->setStyleSheet("color:white;");
    ui->osdGyroPitchValue->setStyleSheet("color:white;");

    ui->osdGyroHeadingValue->setEnabled(true);
    ui->osdGyroPitchValue->setEnabled(true);
    ui->lineEditGyroRoll->setEnabled(true);
}

void FrameOSD::GyroTimerTimeOut()
{
    if(HMI_isRedisValid(redisClient))
    {
        QString inersiamode;
        int status;

        status = HMI_RedisExecute(redisClient,"GET inersia_mode");
        qDebug()<<Q_FUNC_INFO<<"GET redis inersia_mode status: "<<status;

        if(status == 0)
        {
            inersiamode = QString::fromUtf8((const char*)redisClient->reply->str,redisClient->reply->len);
            freeReplyObject(redisClient->reply);
        }
        qDebug() << Q_FUNC_INFO << inersiamode;

        if(inersiamode == "auto")
        {    
            status = HMI_RedisExecute(redisClient,"EXISTS inersia");
            qDebug()<<Q_FUNC_INFO<<"redis inersia key status: "<<status;

            if(status == 0)
            {
                bool key_exist = redisClient->reply->integer > 0;

                freeReplyObject(redisClient->reply);

                if(key_exist)
                {
                    ui->osdGyroHeadingValue->setStyleSheet("color:rgb(0, 255, 0);");
                    ui->lineEditGyroRoll->setStyleSheet("color:rgb(0, 255, 0);");
                    ui->osdGyroPitchValue->setStyleSheet("color:rgb(0, 255, 0);");

                    status = HMI_RedisExecute(redisClient,"HGETALL inersia");

                    if(status == 0)
                    {
                        if (redisClient->reply->type == REDIS_REPLY_ARRAY)
                        {
                            inersiadata.heading = QString::fromUtf8((const char*)redisClient->reply->element[1]->str);
                            inersiadata.roll = QString::fromUtf8((const char*)redisClient->reply->element[3]->str);
                            inersiadata.picth = QString::fromUtf8((const char*)redisClient->reply->element[5]->str);
                        }
                        freeReplyObject(redisClient->reply);

                        ui->osdGyroHeadingValue->setText(inersiadata.heading);
                        ui->lineEditGyroRoll->setText(inersiadata.roll);
                        ui->osdGyroPitchValue->setText(inersiadata.picth);
                    }
                }
                else
                {
                    ui->osdGyroHeadingValue->setStyleSheet("color: rgb(255, 0, 0);");
                    ui->lineEditGyroRoll->setStyleSheet("color: rgb(255, 0, 0);");
                    ui->osdGyroPitchValue->setStyleSheet("color: rgb(255, 0, 0);");
                }
            }
        }
    }
    qDebug() << Q_FUNC_INFO;
}

void FrameOSD::on_osdGryoComboBox_activated(int index)
{
    qDebug () <<Q_FUNC_INFO;

    if (index)
    {
        if(HMI_isRedisValid(redisClient))
        {
            redisClient->reply = (redisReply*)redisCommand(redisClient->context,"SET inersia_mode auto");
            qDebug()<<"SET: "<<redisClient->reply->str;
            freeReplyObject(redisClient->reply);
        }

        GyroAutoModeUi();
    }
    else
    {
        if(HMI_isRedisValid(redisClient))
        {
            redisClient->reply = (redisReply*)redisCommand(redisClient->context,"SET inersia_mode manual");
            qDebug()<<"SET: "<<redisClient->reply->str;
            freeReplyObject(redisClient->reply);
        }

        GyroManualModeUi();
    }
}

void FrameOSD::on_pushButtonGyroApply_clicked()
{
    QString heading = ui->osdGyroHeadingValue->text();
    QString roll = ui->lineEditGyroRoll->text();
    QString pitch = ui->osdGyroPitchValue->text();

    bool ok;
    float heading_float =heading. toFloat(&ok);
    float roll_float =roll. toFloat(&ok);
    float pitch_float =roll. toFloat(&ok);

    if ((heading_float < 0) || (heading_float > 360) )
    {
        QMessageBox::critical(this, "fatal error heading", "invalid input text" );
    }

    if ((roll_float < 0) || (roll_float > 360) )
    {
        QMessageBox::critical(this, "fatal error roll", "invalid input text" );
    }

    if ((pitch_float < 0) || (pitch_float > 360) )
    {
        QMessageBox::critical(this, "fatal error pitch", "invalid input text" );
    }

    redisClient->reply = (redisReply*)redisCommand(redisClient->context,"HMSET inersia heading %s roll %s pitch %s",
                                                  heading.toUtf8().constData(),
                                                  roll.toUtf8().constData(),
                                                  pitch.toUtf8().constData()
                                                  );

    qDebug()<<"SET: "<<redisClient->reply->integer;
    freeReplyObject(redisClient->reply);
}

// ==== GPS ==== //

void FrameOSD::GpsAutoModeUi()
{
    ui->pushButtonGPSApply->setEnabled(false);
    ui->pushButtonGPSApply->setStyleSheet("color: rgb(20, 20, 20);");
}

void FrameOSD::GpsManualModeUi()
{
    ui->pushButtonGPSApply->setEnabled(true);
    ui->pushButtonGPSApply->setStyleSheet("");
    ui->lineEditGpsLat->setStyleSheet("color:white;");
    ui->lineEditGpsLong->setStyleSheet("color:white;");
}

void FrameOSD::GpsTimerTimeOut()
{
    if(HMI_isRedisValid(redisClient))
    {
        int status;
        QString positionmode;

        status = HMI_RedisExecute(redisClient,"GET position_mode");
        qDebug()<<Q_FUNC_INFO<<"GET redis position_mode status: "<<status;

        if(status == 0)
        {
            positionmode = QString::fromUtf8((const char*)redisClient->reply->str,redisClient->reply->len);
            freeReplyObject(redisClient->reply);
        }
        qDebug() << Q_FUNC_INFO << positionmode;

        if(positionmode == "auto")
        {
            status = HMI_RedisExecute(redisClient,"EXISTS position");
            qDebug()<<Q_FUNC_INFO<<"GET redis position key status: "<<status;

            if(status == 0)
            {
                bool key_exist = redisClient->reply->integer > 0;

                freeReplyObject(redisClient->reply);

                if(key_exist)
                {
                    ui->lineEditGpsLat->setStyleSheet("color:rgb(0, 255, 0);");
                    ui->lineEditGpsLong->setStyleSheet("color:rgb(0, 255, 0);");

                    status = HMI_RedisExecute(redisClient,"HGETALL position");

                    if(status == 0)
                    {
                        if (redisClient->reply->type == REDIS_REPLY_ARRAY)
                        {
                            gpsdata.latitude = QString::fromUtf8((const char*)redisClient->reply->element[1]->str);
                            gpsdata.longitude = QString::fromUtf8((const char*)redisClient->reply->element[3]->str);
                        }
                        freeReplyObject(redisClient->reply);

                        ui->lineEditGpsLat->setText(gpsdata.latitude);
                        ui->lineEditGpsLong->setText(gpsdata.longitude);
                    }
                }
                else
                {
                    ui->lineEditGpsLat->setStyleSheet("color: rgb(255, 0, 0);");
                    ui->lineEditGpsLong->setStyleSheet("color: rgb(255, 0, 0);");
                }

            }
        }

    }
    qDebug() << Q_FUNC_INFO;
}

void FrameOSD::on_comboBoxGPSMode_activated(int index)
{
    qDebug() <<Q_FUNC_INFO;

    if (index)
    {
        if(HMI_isRedisValid(redisClient))
        {
            redisClient->reply = (redisReply*)redisCommand(redisClient->context,"SET position_mode auto");
            qDebug()<<"SET: "<<redisClient->reply->str;
            freeReplyObject(redisClient->reply);
        }

        ui->lineEditGpsLat->setEnabled(false);
        ui->lineEditGpsLong->setEnabled(false);

        GpsAutoModeUi();
    }
    else
    {
        if(HMI_isRedisValid(redisClient))
        {
            redisClient->reply = (redisReply*)redisCommand(redisClient->context,"SET position_mode manual");
            qDebug()<<"SET: "<<redisClient->reply->str;
            freeReplyObject(redisClient->reply);

        }

        ui->lineEditGpsLat->setEnabled(true);
        ui->lineEditGpsLong->setEnabled(true);

        GpsManualModeUi();
    }
}

void FrameOSD::on_pushButtonGPSApply_clicked()
{
    QString latitude = ui->lineEditGpsLat->text();
    QString longitude = ui->lineEditGpsLong->text();

    redisClient->reply = (redisReply*)redisCommand(redisClient->context,"HMSET position latitude %s longitude %s",
                                                  latitude.toUtf8().constData(),
                                                  longitude.toUtf8().constData()
                                                  );

    qDebug()<<"SET: "<<redisClient->reply->integer;
    freeReplyObject(redisClient->reply);

}


// ==== Wind ==== //

void FrameOSD::WindAutoModeUi()
{
    ui->pushButtonWindApply->setEnabled(false);
    ui->pushButtonWindApply->setStyleSheet("color: rgb(20, 20, 20);");
}

void FrameOSD::WindManualModeUi()
{
    ui->pushButtonWindApply->setEnabled(true);
    ui->pushButtonWindApply->setStyleSheet("");
    ui->lineEditWindDir->setStyleSheet("color:white;");
    ui->lineEditWindSpeed->setStyleSheet("color:white;");
}

void FrameOSD::WindTimerTimeOut()
{
    if(HMI_isRedisValid(redisClient))
    {
        int status;
        QString windmode;

        status = HMI_RedisExecute(redisClient,"GET wind_mode");
        qDebug()<<Q_FUNC_INFO<<"GET redis wind_mode status: "<<status;

        if(status == 0)
        {
            windmode = QString::fromUtf8((const char*)redisClient->reply->str,redisClient->reply->len);
            freeReplyObject(redisClient->reply);
        }
        qDebug() << Q_FUNC_INFO << windmode;

        if(windmode == "auto")
        {
            status = HMI_RedisExecute(redisClient,"EXISTS wind");
            qDebug()<<Q_FUNC_INFO<<"GET redis wind key status: "<<status;

            if(status == 0)
            {
                bool key_exist = redisClient->reply->integer > 0;

                freeReplyObject(redisClient->reply);

                if(key_exist)
                {
                    ui->lineEditWindDir->setStyleSheet("color:rgb(0, 255, 0);");
                    ui->lineEditWindSpeed->setStyleSheet("color:rgb(0, 255, 0);");

                    status = HMI_RedisExecute(redisClient,"HGETALL wind");

                    if(status == 0)
                    {
                        if (redisClient->reply->type == REDIS_REPLY_ARRAY)
                        {
                            winddata.dir = QString::fromUtf8((const char*)redisClient->reply->element[3]->str);
                            winddata.speed = QString::fromUtf8((const char*)redisClient->reply->element[1]->str);
                        }
                        freeReplyObject(redisClient->reply);

                        ui->lineEditWindDir->setText(winddata.dir);
                        ui->lineEditWindSpeed->setText(winddata.speed);
                    }
                }
                else
                {
                    ui->lineEditWindDir->setStyleSheet("color: rgb(255, 0, 0);");
                    ui->lineEditWindSpeed->setStyleSheet("color: rgb(255, 0, 0);");
                }
            }
        }
    }

    qDebug() << Q_FUNC_INFO;
}

void FrameOSD::on_comboBoxWindMode_activated(int index)
{
    qDebug () <<Q_FUNC_INFO;

    if (index)
    {
        if(HMI_isRedisValid(redisClient))
        {
            redisClient->reply = (redisReply*)redisCommand(redisClient->context,"SET wind_mode auto");
            qDebug()<<"SET: "<<redisClient->reply->str;
            freeReplyObject(redisClient->reply);

        }

        ui->lineEditWindDir->setEnabled(false);
        ui->lineEditWindSpeed->setEnabled(false);

        WindAutoModeUi();
    }
    else
    {
        if(HMI_isRedisValid(redisClient))
        {
            redisClient->reply = (redisReply*)redisCommand(redisClient->context,"SET wind_mode manual");
            qDebug()<<"SET: "<<redisClient->reply->str;
            freeReplyObject(redisClient->reply);
        }

        ui->lineEditWindDir->setEnabled(true);
        ui->lineEditWindSpeed->setEnabled(true);

        WindManualModeUi();
    }
}

void FrameOSD::on_pushButtonWindApply_clicked()
{
    QString dir = ui->lineEditWindDir->text();
    QString speed = ui->lineEditWindSpeed->text();

    redisClient->reply = (redisReply*)redisCommand(redisClient->context,"HMSET wind dir %s speed %s",
                                                  dir.toUtf8().constData(),
                                                  speed.toUtf8().constData()
                                                  );

    qDebug()<<"SET: "<<redisClient->reply->integer;
    freeReplyObject(redisClient->reply);

}


// ==== Weather ==== //

void FrameOSD::WeatherAutoModeUi()
{
    ui->pushButtonWeather->setEnabled(false);
    ui->pushButtonWeather->setStyleSheet("color: rgb(20, 20, 20);");
}

void FrameOSD::WeatherManualModeUi()
{
    ui->pushButtonWeather->setEnabled(true);
    ui->pushButtonWeather->setStyleSheet("");
    ui->lineEditWeatherTemp->setStyleSheet("color:white;");
    ui->lineEditWeatherPress->setStyleSheet("color:white;");
    ui->lineEditWeatherHumidity->setStyleSheet("color:white;");
}

void FrameOSD::WeatherTimerTimeOut()
{
    if(HMI_isRedisValid(redisClient))
    {
        int status;
        QString weathermode;

        status = HMI_RedisExecute(redisClient,"GET weather_mode");
        qDebug()<<Q_FUNC_INFO<<"GET redis weather_mode status: "<<status;

        if(status == 0)
        {
            weathermode = QString::fromUtf8((const char*)redisClient->reply->str,redisClient->reply->len);
            freeReplyObject(redisClient->reply);
        }
        qDebug() << Q_FUNC_INFO << weathermode;

        if(weathermode == "auto")
        {
            status = HMI_RedisExecute(redisClient,"EXISTS weather");
            qDebug()<<Q_FUNC_INFO<<"GET redis weather key status: "<<status;

            if(status == 0)
            {
                bool key_exist = redisClient->reply->integer > 0;

                freeReplyObject(redisClient->reply);

                if(key_exist)
                {
                    ui->lineEditWeatherTemp->setStyleSheet("color:rgb(0, 255, 0);");
                    ui->lineEditWeatherPress->setStyleSheet("color:rgb(0, 255, 0);");
                    ui->lineEditWeatherHumidity->setStyleSheet("color:rgb(0, 255, 0);");

                    status = HMI_RedisExecute(redisClient,"HGETALL weather");

                    if(status == 0)
                    {
                        if (redisClient->reply->type == REDIS_REPLY_ARRAY)
                        {
                            weatherdata.temperature = QString::fromUtf8((const char*)redisClient->reply->element[5]->str);
                            weatherdata.pressure = QString::fromUtf8((const char*)redisClient->reply->element[1]->str);
                            weatherdata.humidity = QString::fromUtf8((const char*)redisClient->reply->element[3]->str);
                        }
                        freeReplyObject(redisClient->reply);

                        ui->lineEditWeatherTemp->setText(weatherdata.temperature);
                        ui->lineEditWeatherPress->setText(weatherdata.pressure);
                        ui->lineEditWeatherHumidity->setText(weatherdata.humidity);
                    }
                }
                else
                {
                    ui->lineEditWeatherTemp->setStyleSheet("color: rgb(255, 0, 0);");
                    ui->lineEditWeatherPress->setStyleSheet("color: rgb(255, 0, 0);");
                    ui->lineEditWeatherHumidity->setStyleSheet("color: rgb(255, 0, 0);");
                }
            }
        }
    }

    qDebug() << Q_FUNC_INFO;
}

void FrameOSD::on_comboBoxWeatherMode_activated(int index)
{
    qDebug () <<Q_FUNC_INFO;

    if (index)
    {
        if(HMI_isRedisValid(redisClient))
        {
            redisClient->reply = (redisReply*)redisCommand(redisClient->context,"SET weather_mode auto");
            qDebug()<<"SET: "<<redisClient->reply->str;
            freeReplyObject(redisClient->reply);
        }

        ui->lineEditWeatherTemp->setEnabled(false);
        ui->lineEditWeatherPress->setEnabled(false);
        ui->lineEditWeatherHumidity->setEnabled(false);

        WeatherAutoModeUi();
    }
    else
    {
        if(HMI_isRedisValid(redisClient))
        {
            redisClient->reply = (redisReply*)redisCommand(redisClient->context,"SET weather_mode manual");
            qDebug()<<"SET: "<<redisClient->reply->str;
            freeReplyObject(redisClient->reply);
        }

        ui->lineEditWeatherTemp->setEnabled(true);
        ui->lineEditWeatherPress->setEnabled(true);
        ui->lineEditWeatherHumidity->setEnabled(true);

        WeatherManualModeUi();
    }
}

void FrameOSD::on_pushButtonWeather_clicked()
{
    QString temperature = ui->lineEditWeatherTemp->text();
    QString pressure = ui->lineEditWeatherPress->text();
    QString humidity = ui->lineEditWeatherHumidity->text();

    redisClient->reply = (redisReply*)redisCommand(redisClient->context,"HMSET weather temperature %s pressure %s humidity %s",
                                                  temperature.toUtf8().constData(),
                                                  pressure.toUtf8().constData(),
                                                  humidity.toUtf8().constData()
                                                  );

    qDebug()<<"SET: "<<redisClient->reply->integer;
    freeReplyObject(redisClient->reply);
}


// ==== Speed ==== //

void FrameOSD::SpeedAutoModeUi()
{
    ui->pushButtonSpeedApply->setEnabled(false);
    ui->pushButtonSpeedApply->setStyleSheet("color: rgb(20, 20, 20);");
}

void FrameOSD::SpeedManualModeUi()
{
    ui->pushButtonSpeedApply->setEnabled(true);
    ui->pushButtonSpeedApply->setStyleSheet("");
    ui->lineEditSpeedSOG->setStyleSheet("color:white;");
    ui->lineEditSpeedCOG->setStyleSheet("color:white;");
}

void FrameOSD::SpeedTimerTimeOut()
{
    if(HMI_isRedisValid(redisClient))
    {
        int status;
        QString speedmode;

        status = HMI_RedisExecute(redisClient,"GET speed_mode");
        qDebug()<<Q_FUNC_INFO<<"GET redis speed_mode status: "<<status;

        if(status == 0)
        {
            speedmode = QString::fromUtf8((const char*)redisClient->reply->str,redisClient->reply->len);
            freeReplyObject(redisClient->reply);
        }
        qDebug() << Q_FUNC_INFO << speedmode;

        if(speedmode == "auto")
        {
            status = HMI_RedisExecute(redisClient,"EXISTS speed");
            qDebug()<<Q_FUNC_INFO<<"GET redis speed key status: "<<status;

            if(status == 0)
            {
                bool key_exist = redisClient->reply->integer > 0;

                freeReplyObject(redisClient->reply);

                if(key_exist)
                {
                    ui->lineEditSpeedSOG->setStyleSheet("color:rgb(0, 255, 0);");
                    ui->lineEditSpeedCOG->setStyleSheet("color:rgb(0, 255, 0);");

                    status = HMI_RedisExecute(redisClient,"HGETALL speed");

                    if(status == 0)
                    {
                        if (redisClient->reply->type == REDIS_REPLY_ARRAY)
                        {
                            speeddata.sog = QString::fromUtf8((const char*)redisClient->reply->element[1]->str);
                            speeddata.cog = QString::fromUtf8((const char*)redisClient->reply->element[3]->str);
                        }
                        freeReplyObject(redisClient->reply);

                        ui->lineEditSpeedSOG->setText(speeddata.sog);
                        ui->lineEditSpeedCOG->setText(speeddata.cog);
                    }
                }
                else
                {
                    ui->lineEditSpeedSOG->setStyleSheet("color: rgb(255, 0, 0);");
                    ui->lineEditSpeedCOG->setStyleSheet("color: rgb(255, 0, 0);");
                }
            }
        }
    }

    qDebug() << Q_FUNC_INFO;
}

void FrameOSD::on_comboBoxSpeedMode_activated(int index)
{
    qDebug () <<Q_FUNC_INFO;

    if (index)
    {
        if(HMI_isRedisValid(redisClient))
        {
            redisClient->reply = (redisReply*)redisCommand(redisClient->context,"SET speed_mode auto");
            qDebug()<<"SET: "<<redisClient->reply->str;
            freeReplyObject(redisClient->reply);
        }

        ui->lineEditSpeedSOG->setEnabled(false);
        ui->lineEditSpeedCOG->setEnabled(false);

        SpeedAutoModeUi();
    }
    else
    {
        if(HMI_isRedisValid(redisClient))
        {
            redisClient->reply = (redisReply*)redisCommand(redisClient->context,"SET speed_mode manual");
            qDebug()<<"SET: "<<redisClient->reply->str;
            freeReplyObject(redisClient->reply);
        }

        ui->lineEditSpeedSOG->setEnabled(true);
        ui->lineEditSpeedCOG->setEnabled(true);

        SpeedManualModeUi();
    }
}

void FrameOSD::on_pushButtonSpeedApply_clicked()
{
    QString sog = ui->lineEditSpeedSOG->text();
    QString cog = ui->lineEditSpeedCOG->text();

    redisClient->reply = (redisReply*)redisCommand(redisClient->context,"HMSET speed sog %s cog %s",
                                                  sog.toUtf8().constData(),
                                                  cog.toUtf8().constData()
                                                  );
    qDebug()<<"GET: "<<redisClient->reply->str;
    freeReplyObject(redisClient->reply);

}


// ==== Water Speed ==== //

void FrameOSD::WaterSpeedAutoModeUi()
{
    ui->pushButtonWaterApply->setEnabled(false);
    ui->pushButtonWaterApply->setStyleSheet("color: rgb(20, 20, 20);");
}

void FrameOSD::WaterSpeedManualModeUi()
{
    ui->pushButtonWaterApply->setEnabled(true);
    ui->pushButtonWaterApply->setStyleSheet("");
    ui->lineEditWaterSOG->setStyleSheet("color:white;");
    ui->lineEditWaterCOG->setStyleSheet("color:white;");
}

void FrameOSD::WaterSpeedTimerTimeOut()
{
    if(HMI_isRedisValid(redisClient))
    {
        int status;
        QString waterspeedmode;

        status = HMI_RedisExecute(redisClient,"GET waterspeed_mode");
        qDebug()<<Q_FUNC_INFO<<"GET redis speed_mode status: "<<status;

        if(status == 0)
        {
            waterspeedmode = QString::fromUtf8((const char*)redisClient->reply->str,redisClient->reply->len);
            freeReplyObject(redisClient->reply);
        }
        qDebug() << Q_FUNC_INFO << waterspeedmode;

        if(waterspeedmode == "auto")
        {
            status = HMI_RedisExecute(redisClient,"EXISTS waterspeed");
            qDebug()<<Q_FUNC_INFO<<"GET redis waterspeed key status: "<<status;

            if(status == 0)
            {
                bool key_exist = redisClient->reply->integer > 0;

                freeReplyObject(redisClient->reply);

                if(key_exist)
                {
                    ui->lineEditWaterSOG->setStyleSheet("color:rgb(0, 255, 0);");
                    ui->lineEditWaterCOG->setStyleSheet("color:rgb(0, 255, 0);");

                    status = HMI_RedisExecute(redisClient,"HGETALL waterspeed");

                    if(status == 0)
                    {
                        if (redisClient->reply->type == REDIS_REPLY_ARRAY)
                        {
                            waterspeeddata.speed = QString::fromUtf8((const char*)redisClient->reply->element[1]->str);
                            waterspeeddata.course = QString::fromUtf8((const char*)redisClient->reply->element[3]->str);
                        }
                        freeReplyObject(redisClient->reply);

                        ui->lineEditWaterSOG->setText(waterspeeddata.speed);
                        ui->lineEditWaterCOG->setText(waterspeeddata.course);
                    }
                }
                else
                {
                    ui->lineEditWaterSOG->setStyleSheet("color: rgb(255, 0, 0);");
                    ui->lineEditWaterCOG->setStyleSheet("color: rgb(255, 0, 0);");
                }
            }
        }
    }

    qDebug() << Q_FUNC_INFO;
}

void FrameOSD::on_comboBoxWaterMode_activated(int index)
{
    qDebug () <<Q_FUNC_INFO;

    if (index)
    {
        if(HMI_isRedisValid(redisClient))
        {
            redisClient->reply = (redisReply*)redisCommand(redisClient->context,"SET waterspeed_mode auto");
            qDebug()<<"SET: "<<redisClient->reply->str;
            freeReplyObject(redisClient->reply);
        }

        ui->lineEditWaterSOG->setEnabled(false);
        ui->lineEditWaterCOG->setEnabled(false);

        WaterSpeedAutoModeUi();
    }
    else
    {
        if(HMI_isRedisValid(redisClient))
        {
            redisClient->reply = (redisReply*)redisCommand(redisClient->context,"SET waterspeed_mode manual");
            qDebug()<<"SET: "<<redisClient->reply->str;
            freeReplyObject(redisClient->reply);
        }

        ui->lineEditWaterSOG->setEnabled(true);
        ui->lineEditWaterCOG->setEnabled(true);

        WaterSpeedManualModeUi();
    }
}

void FrameOSD::on_pushButtonWaterApply_clicked()
{
    QString speed = ui->lineEditWaterSOG->text();
    QString course = ui->lineEditWaterCOG->text();

    redisClient->reply = (redisReply*)redisCommand(redisClient->context,"HMSET waterspeed speed %s course %s",
                                                  speed.toUtf8().constData(),
                                                  course.toUtf8().constData()
                                                  );
    qDebug()<<"SET: "<<redisClient->reply->str;
    freeReplyObject(redisClient->reply);
}
